using Microsoft.CodeAnalysis;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace WinFormsComInterop.SourceGenerator.Tests
{
    [TestClass]
    public class ComCallableWrapperDispatchTest : CodeGenerationTestBase
    {
        protected override SyntaxTree GetValidatedSyntaxTree(Compilation outputCompilation)
        {
            return outputCompilation.SyntaxTrees
                .First(_ => _.FilePath.Contains("Foo") && !_.FilePath.Contains("comwrappers"));
        }

        [TestMethod]
        public void DeclarationOfProxy()
        {
            string source = @"
namespace Foo
{
    using System.Runtime.InteropServices;

    [InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
    public interface IStr
    {
        void Read();
    }

    [ComCallableWrapper(typeof(IStr))]
    partial class C
    {
    }
}";
            string output = this.GetGeneratedOutput(source, NullableContextOptions.Disable);

            Assert.IsNotNull(output);

            var expectedOutput = @"// <auto-generated>
// Code generated by COM Proxy Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
#nullable enable
using ComInterfaceDispatch = System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch;
using Marshal = System.Runtime.InteropServices.Marshal;

namespace Foo
{
    [System.Runtime.Versioning.SupportedOSPlatform(""windows"")]
    unsafe partial class IStrProxy
    {
    }
}";
            Assert.AreEqual(expectedOutput, output);
        }
    }
}
